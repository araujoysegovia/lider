<?php

namespace Lider\Bundle\LiderBundle\Repository;

use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;

/**
 * MainRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MainRepository extends EntityRepository
{
	private $operator = array(
        "=" => "%s = %s",
        ">" => "%s > %s",
        "<" => "%s < %s",
        ">=" => "%s >= %s",
        "<=" => "%s <= %s",
        "has" => "%s LIKE '%s'",
        "equal" => "%s = '%s'",
        "start_with" => "%s LIKE '%s'",
        "end_with" => "%s LIKE '%s'",
        "between" => "%s between '%s' and '%s'",
    );

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null) {
        return parent::findBy($this->fixCriteria($criteria), $orderBy, $limit, $offset);
        //return $qb->getResult();
    }

    public function findOneBy(array $criteria) {
        return parent::findOneBy($this->fixCriteria($criteria));
    }

    private function fixCriteria(array $criteria) {
        //Unless explicitly requested to return deleted items, we want to return non-deleted items by default
        $entity = $this->_entityName;
        $em = $this->getEntityManager();
        $md = $em->getClassMetadata($entity);
        $fieldMapping = $md->fieldMappings;
        if (array_key_exists('deleted', $fieldMapping)) {
            if (!in_array('deleted', $criteria)) {
                $criteria['deleted'] = false;
            }
        }

        return $criteria;
    }

    public function getArrayBy(array $criteria, array $orderBy = null, $sresult = null, $limit = null) {

        $query = $this->getSQLStructure($criteria, $orderBy, $sresult, $limit);
        $data = $query->getQuery()->getArrayResult();
        $count = count($data);

        if(!is_null($sresult) && !is_null($limit))
        {
            $paginateData = array();
            for($i=$sresult;$i<($sresult+$limit);$i++)
            {
                if($count > $i)
                {
                    $paginateData[] = $data[$i];
                }
            }
            $data = $paginateData;
        }

        return array(
            "total" => $count,
            "data" => $data
        );
    }

    protected function getSQLStructure(array $criteria, $orderBy = null, $sresult = null, $limit = null, $filter = null)
    {
        $em = $this->getEntityManager();
        $criteria = $this->fixCriteria($criteria);
        $persister = $em->getUnitOfWork()
                ->getEntityPersister($this->_entityName);

        $query = $em->getRepository($this->_entityName)->createQueryBuilder('z');

        $sequence = array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
            "k", "l", "m", "n");

        $md = $em->getClassMetadata($this->_entityName);
        $fieldMapping = $md->fieldMappings;
        $associations = $md->associationMappings;
        $i = 0;
        $select = "z";
        $entities = array();
        foreach ($associations as $name => $value) {
            $select.=", " . $sequence[$i];
            $query->leftJoin('z.' . $name, $sequence[$i]);
            $entities[$name] = $sequence[$i];
            $i++;
        }

        $query->select($select);
        if (count($criteria) > 0) {
            $str_where = "";
            $i = 0;
            foreach ($criteria as $name => $value) {
                if ($i > 0)
                    $str_where .= " AND ";
                if(array_key_exists($name, $associations))
                {
                    if($associations[$name]["type"] == 8)
                    {
                        $entityName = $entities[$name];
                        $str_where .= $entityName.".id = :$name";
                    }
                    else
                    {
                        $str_where .= "z.$name = :$name";
                    }
                }
                else
                {
                    $str_where .= "z.$name = :$name";
                }
                $i++;
            }
            $query->where($str_where);
            $i = 0;
            foreach ($criteria as $name => $value) {
                if (isset(
                                $persister->getClassMetadata()->fieldMappings[$name]))
                    $query
                            ->setParameter($name, $value, Type::getType(
                                            $persister->getClassMetadata()
                                            ->fieldMappings[$name]['type'])
                                    ->getBindingType());
                else
                    $query->setParameter($name, $value, Type::INTEGER);
                $i++;
            }
        }
        if (!is_null($orderBy)) {
            if(is_array($orderBy)){
                foreach ($orderBy as $key => $value) {
                    $query->orderBy('z.'.$value['field']);
                }
            }else{
                $query->orderBy("z.".$orderBy);    
            }
        }
        if($filter)
        {
            $counter = 1;
            foreach($filter as $fil)
            {
                $this->setFilterToQuery($query, $fil, $counter);
                $counter++;
            }
            
        }
        return $query;
    }


    public function getArrayEntityWithOneLevel(array $criteria, $orderBy = null, $sresult = null, $limit = null, array $filter = null) {

        $query = $this->getSQLStructure($criteria, $orderBy, $sresult, $limit, $filter);
        $sql = $query->getQuery()->getSQL();
        // echo $sql;
        $data = $query->getQuery()->getArrayResult();
        // print_r($data);
        $count = count($data);

        if(!is_null($sresult) && !is_null($limit))
        {
            $this->aplyPagination($data, $count, $sresult, $limit);
        }

        return array(
            "total" => $count,
            "data" => $data
        );
    }

    public function getEntityWithOneLevel(array $criteria, array $orderBy = null, $sresult = null, $limit = null) {

        $query = $this->getSQLStructure($criteria, $orderBy, $sresult, $limit);

        $data = $query->getQuery()->getResult();
        $count = count($data);

        if(!is_null($sresult) && !is_null($limit))
        {
            $this->aplyPagination($data, $count, $sresult, $limit);
        }

        return array(
            "total" => $count,
            "data" => $data
        );
    }

    protected function aplyPagination(&$data, $count, $start, $limit)
    {
        $paginateData = array();
        for($i=$start;$i<($start+$limit);$i++)
        {
            if($count > $i)
            {
                $paginateData[] = $data[$i];
            }
        }
        $data = $paginateData;
        return $data;
    }

    public function setFilterToQuery(&$query, $filter, $counter)
    {
        $em = $this->getEntityManager();
        $DQLParts = $query->getDQLParts();
        $fr = $DQLParts['from'];
        $from = $fr[0];
        $from2 = $from->getFrom();
        $alias = $from->getAlias();
        $joins = $DQLParts['join'];
        $join = $joins[$alias];
        $ClassMetadata = $em->getClassMetadata($from2);
        $fieldMappings = $ClassMetadata->fieldMappings;
        $associationMappings = $ClassMetadata->associationMappings;
        $lastAlias = $alias;
        $lastProperty = null;
        $md = $ClassMetadata;
        $fm = $fieldMappings;
        $am = $associationMappings;
        $i = 1;

        $property = $filter['property'];
        $val = $filter['value'];
        $operator = $filter['operator'];
        $explode = explode(".", $property);
        // print_r($explode);
        if(count($explode) > 1)
        {
            $lastPosition = null;
            foreach($explode as $exp)
            {
                $md = $this->isAssociation($exp, $am);
                // print_r($md);
                if(!is_null($md))
                {
                    $fm = $md->fieldMappings;
                    $am = $md->associationMappings;
                }

                $jo = $this->isJoin($exp, $join, $lastAlias);

                if(!$jo && !is_null($md))
                {
                    $query->leftJoin($lastAlias.".".$exp, $lastAlias.$i);
                    $lastAlias = $lastAlias.$i;
                    $i++;
                }
                $lastPosition = $exp;
            }
            // echo $lastPosition;
            // print_r($fm);
            if(array_key_exists($lastPosition, $fm))
            {
                $lastProperty = $lastPosition;
            }
            else
            {
                throw new \Exception("Propiedad $lastPosition no pertenece a la entidad");
            }
        }
        else
        {
            // print_r($explode);
            if(array_key_exists($explode[0], $fm))
            {
                $lastProperty = $explode[0];
            }
            else
            {
                throw new \Exception("Propiedad $explode[0] no pertenece a la entidad");
            }
        }
        // echo $lastProperty;
        $fmType = $fm[$lastProperty]['type'];
        $t = null;
        switch($fmType)
        {
            case "array":
                $t = \Doctrine\DBAL\Types\Type::TARRAY;
                break;
            case "simple_array":
                $t = \Doctrine\DBAL\Types\Type::SIMPLE_ARRAY;
                break;
            case "json_array":
                $t = \Doctrine\DBAL\Types\Type::JSON_ARRAY;
                break;
            case "bigint":
                $t = \Doctrine\DBAL\Types\Type::BIGINT;
                break;
            case "boolean":
                $t = \Doctrine\DBAL\Types\Type::BOOLEAN;
                break;
            case "datetime":
                $t = \Doctrine\DBAL\Types\Type::DATETIME;
                break;
            case "datetimetz":
                $t = \Doctrine\DBAL\Types\Type::DATETIMETZ;
                break;
            case "date":
                $t = \Doctrine\DBAL\Types\Type::DATE;
                break;
            case "time":
                $t = \Doctrine\DBAL\Types\Type::TIME;
                break;
            case "decimal":
                $t = \Doctrine\DBAL\Types\Type::DECIMAL;
                break;
            case "integer":
                $t = \Doctrine\DBAL\Types\Type::INTEGER;
                break;
            case "object":
                $t = \Doctrine\DBAL\Types\Type::OBJECT;
                break;
            case "smallint":
                $t = \Doctrine\DBAL\Types\Type::SMALLINT;
                break;
            case "string":
                $t = \Doctrine\DBAL\Types\Type::STRING;
                break;
            case "text":
                $t = \Doctrine\DBAL\Types\Type::TEXT;
                break;
            case "blob":
                $t = \Doctrine\DBAL\Types\Type::BLOG;
                break;
            case "float":
                $t = \Doctrine\DBAL\Types\Type::FLOAT;
                break;
            case "guid":
                $t = \Doctrine\DBAL\Types\Type::GUID;
                break;
        }
        if($fmType == "datetime")
        {
            if(is_array($val))
            {
                $first = new \DateTime($val[0]);
                $second = new \DateTime($val[1]." 23:59:59");
            }
            else
            {
                if($operator == "<=" || $operator == ">")
                {
                    $val = new \DateTime($val." 23:59:59");
                }
                elseif($operator == "=")
                {
                    $val1 = new \DateTime($val);
                    $val2 = new \DateTime($val." 23:59.59");
                }
                else
                {
                    $val = new \DateTime($val);
                }
            }
        }
        elseif($fmType == "date")
        {
            if(is_array($val))
            {
                $first = new \DateTime($val[0]);
                $second = new \DateTime($val[1]);
            }
            else
            {
                $val = new \DateTime($val);
            }
        }
        switch($operator)
        {
            case "=":
                if($fmType == "datetime")
                {
                    $query->andWhere($lastAlias.".".$lastProperty." BETWEEN :s".$counter." AND :p".$counter);
                    $query->setParameter('s'.$counter, $val1, $t);
                    $query->setParameter('p'.$counter, $val2, $t);
                }
                else
                {
                    $query->andWhere($lastAlias.".".$lastProperty." = :s".$counter);
                    $query->setParameter('s'.$counter, $val, $t);
                }
                break;
            case ">":
                $query->andWhere($lastAlias.".".$lastProperty." > :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "<":
                $query->andWhere($lastAlias.".".$lastProperty." < :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case ">=":
                $query->andWhere($lastAlias.".".$lastProperty." >= :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "<=":
                $query->andWhere($lastAlias.".".$lastProperty." <= :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "has":
                $val = "%".strtoupper($val)."%";
                $query->andWhere("upper(".$lastAlias.".".$lastProperty.") LIKE :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "equal":
                $query->andWhere($lastAlias.".".$lastProperty." = :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "start_with":
                // $val = $val."%";
                $val = strtoupper($val)."%";
                $query->andWhere("upper(".$lastAlias.".".$lastProperty.") LIKE :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "end_with":
                // $val = "%".$val;
                $val = "%".strtoupper($val);
                $query->andWhere("upper(".$lastAlias.".".$lastProperty.") LIKE :s".$counter);
                $query->setParameter('s'.$counter, $val, $t);
                break;
            case "between":
                $query->andWhere($lastAlias.".".$lastProperty." BETWEEN :s".$counter." AND :p".$counter);
                $query->setParameter('s'.$counter, $first, $t);
                $query->setParameter('p'.$counter, $second, $t);
                break;
        }
        return $query;
    }

    private function isAssociation($explode, $association)
    {
        $em = $this->getEntityManager();
        if(array_key_exists($explode, $association))
        {
            $entityName = $association[$explode]['targetEntity'];
            $md = $em->getClassMetadata($entityName);
            return $md;
        }
        return null;
    }

    private function isJoin($explode , $join, &$lastAlias)
    {
        foreach($join as $item)
        {
            if(strcmp($item->getJoin(), $lastAlias.".".$explode) == 0)
            {
                $lastAlias = $item->getAlias();
                return true;
            }
        }
        return false;
    }
}
